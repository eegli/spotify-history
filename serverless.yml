service: spotify-history

frameworkVersion: '3'
configValidationMode: error

plugins:
  - serverless-webpack
  - serverless-dynamodb-local

custom:
  env: ${opt:stage,'stg'} # Define default stage
  prefix: ${self:custom.env}-${self:service}
  tableName: ${self:custom.prefix}-db
  scheduleEnabled:
    prod: true
    stg: false
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      noStart: true
      migrate: true
      seed: true
      convertEmptyValues: true
    seed:
      test:
        sources:
          - table: ${self:custom.tableName}
            sources: [./dynamo-seed.json]
  webpack:
    packager: npm
    packagerOptions:
      ignoreScripts: true
      noInstall: false
    includeModules: true
    keepOutputDirectory: true
    excludeFiles: test/**/*

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-central-1
  stackName: ${self:custom.prefix}-stack
  stage: ${self:custom.env}
  versionFunctions: false
  memorySize: 256
  timeout: 5
  logRetentionInDays: 7
  environment:
    TABLE_NAME: ${self:custom.tableName} # Dynamo table name
    CUSTOM_AWS_REGION: ${self:provider.region} # AWS_REGION is reserved so...
    NODE_ENV: ${self:custom.env}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}'

functions:
  spotify-history:
    name: ${self:custom.prefix}
    handler: src/index.historyHandler
    environment:
      SPOTIFY_CLIENT_ID: ${file(./.secrets/credentials_spotify.json):clientId}
      SPOTIFY_CLIENT_SECRET: ${file(./.secrets/credentials_spotify.json):clientSecret}
      SPOTIFY_REFRESH_TOKEN: ${file(./.secrets/token_spotify.json):refresh_token}
    events:
      - eventBridge:
          # Cron job to run every hour
          schedule: cron(0 * ? * * *)
          # By default, disable the schedule. Conditionally enable it
          # based on the environment. Same goes for the backup
          # handler.
          enabled: ${self:custom.scheduleEnabled.${self:custom.env}, false}
  spotify-history-backup:
    name: ${self:custom.prefix}-backup
    handler: src/index.backupHandler
    environment:
      GOOGLE_CLIENT_ID: ${file(./.secrets/credentials_google.json):installed.client_id}
      GOOGLE_CLIENT_SECRET: ${file(./.secrets/credentials_google.json):installed.client_secret}
      GOOGLE_REFRESH_TOKEN: ${file(./.secrets/token_google.json):refresh_token}
    events:
      - eventBridge:
          # Cron job to run weekly on Monday at 12:30 a.m
          schedule: cron(30 0 ? * MON *)
          enabled: ${self:custom.scheduleEnabled.${self:custom.env}, false}

resources:
  Resources:
    SpotifyHistoryDb:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          AttributeName: 'expire_at'
          Enabled: true

package:
  individually: true
  patterns:
    - '!README.md'
    - '!tsconfig.client.json'
    - '!.env'
    - '!.nvmrc'
    - '!scripts/**'
