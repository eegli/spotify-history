service: spotify-history

frameworkVersion: '2'
useDotenv: true
configValidationMode: error
unresolvedVariablesNotificationMode: error

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local

custom:
  env: ${opt:stage,'stg'} # Define default stage
  prefix: ${self:custom.env}-${self:service}
  tableName: ${self:custom.prefix}-db
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true
      heapInitial: 200m
      heapMax: 1g
      seed: false
      convertEmptyValues: true
    seed:
      test:
        sources:
          - table: ${self:custom.tableName}
            sources: [./dynamo-seed.json]

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  stackName: ${self:custom.prefix}-stack
  stage: ${self:custom.env}
  lambdaHashingVersion: 20201221
  versionFunctions: false
  eventBridge:
    useCloudFormation: true
  memorySize: 128
  timeout: 5
  logRetentionInDays: 7
  environment:
    TABLE_NAME: ${self:custom.tableName} # Dynamo table name
    CUSTOM_AWS_REGION: ${self:provider.region} # AWS_REGION is reserved so...
    STAGE: ${self:custom.env} # Stage
    SPOTIFY_CLIENT_ID: ${file(./credentials_spotify.json):client_id}
    SPOTIFY_CLIENT_SECRET: ${file(./credentials_spotify.json):client_secret}
    SPOTIFY_REFRESH_TOKEN: ${file(./token_spotify.json):refresh_token}
    GOOGLE_CLIENT_ID: ${file(./credentials_google.json):installed.client_id}
    GOOGLE_CLIENT_SECRET: ${file(./credentials_google.json):installed.client_secret}
    GOOGLE_REFRESH_TOKEN: ${file(./token_google.json):refresh_token}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}'

functions:
  spotify-history-lambda:
    name: ${self:custom.prefix}
    handler: src/index.handler
    events:
      - eventBridge:
          schedule: cron(0 * * * ? *) # Cron job to run every hour
  spotify-history-lambda-backup:
    name: ${self:custom.prefix}-backup
    handler: src/index.backup

resources:
  Resources:
    SpotifyHistoryDb:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

package:
  patterns:
    - '!README.md'
    - '!tsconfig.client.json'
    - '!.env'
    - '!.nvmrc'
    - '!scripts/**'
